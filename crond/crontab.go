//+build !darwin,!windows

package crond

import (
	"fmt"
	"io"
	"os/exec"
	"regexp"
	"strings"
)

const (
	startMarker = "### this content was generated by resticprofile, please leave this line intact ###\n"
	endMarker   = "### end of resticprofile content, please leave this line intact ###\n"
)

type Crontab struct {
	name    string
	entries []Entry
}

func NewCrontab(name string, entries []Entry) *Crontab {
	return &Crontab{
		name:    name,
		entries: entries,
	}
}

func (c *Crontab) Update(crontab string) {
	//
}

func (c *Crontab) Generate(w io.StringWriter) error {
	var err error

	_, err = w.WriteString(startMarker)
	if err != nil {
		return err
	}
	if len(c.entries) > 0 {
		for _, entry := range c.entries {
			err = entry.Generate(w)
			if err != nil {
				return err
			}
		}
	}
	_, err = w.WriteString(endMarker)
	if err != nil {
		return err
	}
	return nil
}

func (c *Crontab) LoadCurrent() (string, error) {
	buffer := &strings.Builder{}
	cmd := exec.Command("crontab", "-l")
	cmd.Stdout = buffer
	cmd.Stderr = buffer
	err := cmd.Run()
	if err != nil {
		return "", err
	}
	return cleanupCrontab(buffer.String()), nil
}

func cleanupCrontab(crontab string) string {
	// this pattern detects if a header has been addded to the output of "crontab -l"
	pattern := regexp.MustCompile(`^# DO NOT EDIT THIS FILE[^\n]*\n#[^\n]*\n#[^\n]*\n`)
	// and removes it if found
	return pattern.ReplaceAllString(crontab, "")
}

// extractOwnSection returns before our section, inside, and after if found.
// It is not returning both start and end markers
func extractOwnSection(crontab string) (string, string, string, bool) {
	start := strings.Index(crontab, startMarker)
	end := strings.Index(crontab, endMarker)
	if start == -1 || end == -1 {
		return "", crontab, "", false
	}
	return crontab[:start], crontab[start+len(startMarker) : end], crontab[end+len(endMarker):], true
}

func deleteLine(crontab string, entry Entry) (string, bool, error) {
	// should match a line like:
	// 00,15,30,45 * * * *	/home/resticprofile --no-ansi --config config.yaml --name profile --log backup.log backup
	search := fmt.Sprintf(`(?m)^[^#][^\n]+resticprofile[^\n]+--config %s --name %s[^\n]* %s\n`,
		regexp.QuoteMeta(entry.configFile),
		regexp.QuoteMeta(entry.profileName),
		regexp.QuoteMeta(entry.commandName),
	)
	pattern, err := regexp.Compile(search)
	if err != nil {
		return crontab, false, err
	}
	if pattern.MatchString(crontab) {
		// al least one was found
		return pattern.ReplaceAllString(crontab, ""), true, nil
	}
	return crontab, false, nil
}
